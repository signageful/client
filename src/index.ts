import { app, BrowserWindow, protocol, shell } from "electron";
import { machineIdSync } from "node-machine-id";
import "./ipc";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

process.env["ELECTRON_DISABLE_SECURITY_WARNINGS"] = "true";

const isDebug =
  process.env.NODE_ENV === "development" || process.env.DEBUG_PROD === "true";
const machineId = machineIdSync(true);

let mainWindow: BrowserWindow | null = null;

const createWindow = async (): Promise<void> => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1024,
    height: 728,
    kiosk: true,
    webPreferences: {
      contextIsolation: true,
      webSecurity: false,
      allowRunningInsecureContent: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.removeMenu();

  let url = `https://app.signageful.com/player?serial=${machineId}`;
  if (isDebug) {
    url = `https://app.signageful.dev/player?serial=${machineId}`;
  }

  // and load the index.html of the app.
  mainWindow.loadURL(`${MAIN_WINDOW_WEBPACK_ENTRY}?target=${url}`);

  if (isDebug) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        // strip out "x-frame-options" header and "content-security-policy" header
        responseHeaders: Object.fromEntries(
          Object.entries(details.responseHeaders || {})
            .filter((header) => !/x-frame-options/i.test(header[0]))
            .filter((header) => !/frame-ancestors/i.test(header[0]))
            .filter((header) => !/content-security-policy/i.test(header[0]))
            .filter((header) => !/x-content-security-policy/i.test(header[0]))
            .filter((header) => !/x-webkit-csp/i.test(header[0]))
        ),
      });
    }
  );

  mainWindow.webContents.on("dom-ready", () => {
    const css = "* { cursor: none !important; }";
    mainWindow.webContents.insertCSS(css);
  });

  mainWindow.on("closed", () => {
    mainWindow = null;
  });

  // Open urls in the user's browser
  mainWindow.webContents.setWindowOpenHandler((edata) => {
    shell.openExternal(edata.url);
    return { action: "deny" };
  });
};

protocol.registerSchemesAsPrivileged([
  {
    scheme: "http",
    privileges: {
      standard: true,
      bypassCSP: true,
      allowServiceWorkers: true,
      supportFetchAPI: true,
      corsEnabled: true,
      stream: true,
    },
  },
  {
    scheme: "https",
    privileges: {
      standard: true,
      bypassCSP: true,
      allowServiceWorkers: true,
      supportFetchAPI: true,
      corsEnabled: true,
      stream: true,
    },
  },
  { scheme: "mailto", privileges: { standard: true } },
]);

// Quit when all windows are closed.
app.on("window-all-closed", () => {
  // Respect the OSX convention of having the application in memory even
  // after all windows have been closed
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.commandLine.appendSwitch("site-isolation-trial-opt-out");
app.commandLine.appendSwitch("disable-site-isolation-trials");
app.commandLine.appendSwitch("disable-features", "IsolateOrigins");

app
  .whenReady()
  .then(() => {
    createWindow();

    app.on("activate", function () {
      // On OS X it's common to re-create a window in the app when the
      // dock icon is clicked and there are no other windows open.
      if (BrowserWindow.getAllWindows().length === 0) createWindow();
    });
  })
  .catch(console.error);
